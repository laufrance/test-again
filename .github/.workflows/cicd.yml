name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx

  start-docker:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Copy environment variables
        run: cp .env.example .env.development

      - name: Start Docker services
        run: docker-compose up -d

      - name: Wait for API to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080/health; then
              echo "API is ready"
              break
            fi
            echo "Waiting for API..."
            sleep 5
          done

  test:
    runs-on: ubuntu-latest
    needs: start-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tests with Jest and Supertest
        run: npm test -- --coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  stop-docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Stop Docker services
        run: docker-compose down

  update-readme:
    runs-on: ubuntu-latest
    needs: stop-docker
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Extract coverage percentage
        id: extract-coverage
        run: |
          COVERAGE=$(grep -oP 'line-rate="\K[0-9.]+' coverage/lcov-report/index.html | awk '{print $1*100}' | head -n1 | tr -d '\n')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Generate badge URLs
        run: |
          COVERAGE_BADGE="https://img.shields.io/badge/Coverage-${COVERAGE}%25-brightgreen"
          CI_BADGE="https://github.com/${{ github.repository }}/actions/workflows/cicd.yml/badge.svg"
          echo "COVERAGE_BADGE=$COVERAGE_BADGE" >> $GITHUB_ENV
          echo "CI_BADGE=$CI_BADGE" >> $GITHUB_ENV

      - name: Update README with badges
        run: |
          sed -i "s|!\[Coverage\](.*)|![Coverage](${COVERAGE_BADGE})|" README.md
          sed -i "s|!\[CI/CD\](.*)|![CI/CD](${CI_BADGE})|" README.md

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          TARGET_BRANCH=${{ github.head_ref || github.ref_name }}
          git fetch origin $TARGET_BRANCH
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH
          git add README.md
          git commit -m "Update README with coverage and CI/CD badges" || echo "No changes to commit"
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:$TARGET_BRANCH